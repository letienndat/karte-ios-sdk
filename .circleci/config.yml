# iOS CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/ios-migrating-from-1-2/ for more details
#
version: 2.1

parameters:
  os:
    type: string
    default: "17.5"
  device:
    type: string
    default: "iPhone 15"
  context:
    description: Specify running context. Default is CI but theare are 2 options for manual release.
    type: enum
    enum: [ci, manual, dry_run]
    default: ci

orbs:
  slack: circleci/slack@3.4.2
  codecov: codecov/codecov@1.2.3 

executors:
  build:
    resource_class: macos.m1.large.gen1
    macos:
      xcode: "16.0.0"
    shell: /bin/bash --login -eo pipefail
    working_directory: /Users/distiller/project
    environment:
      FL_OUTPUT_DIR: output

commands:
  git_clone:
    steps:
      - checkout
      - run: 
          name: Checkout git submodules
          command: |
            git submodule sync
            git submodule update --init

  setup_gems:
    steps:
      - restore_cache:
          name: Restoring gems cache
          key: v2-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          name: Saving gems cache
          key: v2-gems-{{ checksum "Gemfile.lock" }}
          paths: vendor/bundle
  
  setup_pods:
    steps:
      - restore_cache:
          name: Restoring pod cache
          key: v1-pod-{{ checksum "Podfile.lock" }}
      - run:
          name: Pod install
          command: bundle exec pod install --verbose
      - save_cache:
          name: Saving pod cache
          key: v1-pod-{{ checksum "Podfile.lock" }}
          paths: Pods

  lint_podspecs:
    steps:
      - run:
          name: Execute lint for all podspecs
          command: bundle exec pod lib lint

  setup_legacy_xcode_toolchain:
    steps:
      - run:
          name: Copy Libarclite Files
          command: |
            sudo mkdir /Applications/Xcode-16.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc
            sudo cp legacy_xcbuildtools/*.a /Applications/Xcode-16.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/arc

jobs:
  build:
    executor:
      name: build
    steps:
      - git_clone
      - run:
          name: Build frameworks
          command: |
            DESTINATION=`echo 'platform=iOS Simulator,name=<< pipeline.parameters.device >>,OS=<< pipeline.parameters.os >>'`
            xcodebuild -workspace Karte.xcworkspace \
                       -scheme Build \
                       -destination "${DESTINATION}" \
                       -derivedDataPath DerivedData \
                       -skipPackagePluginValidation \
                       -skipMacroValidation
      - persist_to_workspace:
          root: DerivedData
          paths:
            - "**/*"
      - slack/status:
          fail_only: true
          
  test:
    executor:
      name: build
    steps:
      - git_clone
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup Derived directory
          command: |
            mkdir DerivedData
            cp -r /tmp/workspace DerivedData
      - setup_gems
      - setup_pods
      - setup_legacy_xcode_toolchain
      - run:
          name: Podspec lint
          command: bundle exec pod spec lint *.podspec --quick
      - run:
          name: Run tests
          command: |
            DESTINATION=`echo 'platform=iOS Simulator,name=<< pipeline.parameters.device >>,OS=<< pipeline.parameters.os >>'`
            xcodebuild test -workspace Karte.xcworkspace \
                            -scheme KarteTests \
                            -destination "${DESTINATION}" \
                            -derivedDataPath DerivedData \
                            -resultBundlePath "output/KarteTests_<< pipeline.parameters.os >>.xcresult" \
                            -skipPackagePluginValidation \
                            -skipMacroValidation
            bundle exec slather
      - codecov/upload:
          xtra_args: -f ./cobertura.xml -X coveragepy -X gcov -X xcode -build_directory "output/KarteTests_<< pipeline.parameters.os >>.xcresult"
          validate_url: true
          
      - run:
          name: Archive test result
          command: zip -r "KarteTests-results.zip" "KarteTests_<< pipeline.parameters.os >>.xcresult"
          working_directory: /Users/distiller/project/output
          when: always
      - store_artifacts:
          path: "output/KarteTests-results.zip"
      - slack/status:
          fail_only: true

  generate_docs:
    executor:
      name: build
    steps:
      - git_clone
      - setup_gems
      - run:
          name: Generate docs
          command: |
            if [ $EXEC_ENV = 'private' ]; then
              git config --global user.name "${GITHUB_USER_NAME}"
              git config --global user.email "${GITHUB_USER_EMAIL}"
              bundle exec ruby ./generate_docs.rb
            fi
          working_directory: /Users/distiller/project/scripts
      - slack/status:
          fail_only: true

  publish:
    executor:
      name: build
    steps:
      - git_clone
      - setup_gems
      - setup_pods
      - setup_legacy_xcode_toolchain
      - run:
          name: Publish
          command: bash ./scripts/publish.sh
      - slack/status:
          fail_only: true

  publish_pods:
    executor:
      name: build
    steps:
      - git_clone
      - setup_gems
      - setup_pods
      - setup_legacy_xcode_toolchain
      - run:
          name: Publish Pods
          command: bash ./scripts/publish.sh
          environment:
            PODSPEC_ONLY: 1
      - slack/status:
          fail_only: true

  dry_run:
    executor:
      name: build
    steps:
      - git_clone
      - setup_gems
      - setup_pods
      - setup_legacy_xcode_toolchain
      - lint_podspecs
      - slack/status:
          fail_only: true

  echo_context:
    executor:
      name: build
    steps:
      - run:
          name: Show current context
          command: echo << pipeline.parameters.context >>

workflows:
  version: 2
  build_and_deploy:
    when:
      equal: [ ci, << pipeline.parameters.context >> ]
    jobs:
      - build
      - generate_docs:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - test:
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - master

  manual_deploy:
    when:
      equal: [ manual, << pipeline.parameters.context >> ]
    jobs:
      - echo_context
      - build:
          filters:
            branches:
              only:
                - master
      - test:
          requires:
            - build
      - publish_pods:
          requires:
            - test

  dry_run:
    when:
      equal: [ dry_run, << pipeline.parameters.context >> ]
    jobs:
      - dry_run

